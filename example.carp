(add-cflag "-D JSON_IMPLEMENTATION")
(relative-include "json_helper.h")

(register-type json_token)
(register-type JsonParsed)

(register JSON_NONE Int)
(register JSON_OBJECT Int)
(register JSON_ARRAY Int)
(register JSON_NUMBER Int)
(register JSON_STRING Int)
(register JSON_TRUE Int)
(register JSON_FALSE Int)
(register JSON_NULL Int)

(defmodule Json

  (register parse (Fn [&String] JsonParsed))
  (register string (Fn [JsonParsed &String] String))
  (register double (Fn [JsonParsed &String] Double))
  (register int (Fn [JsonParsed &String] Int))
  (register query (Fn [JsonParsed &String] (Ptr json_token)))
  (register type (Fn [JsonParsed &String] Int))

  (defn type-to-str [type]
    (case type
      JSON_NONE @"none"
      JSON_OBJECT @"object"
      JSON_ARRAY @"array"
      JSON_NUMBER @"number"
      JSON_STRING @"string"
      JSON_TRUE @"true"
      JSON_FALSE @"false"
      JSON_NULL @"null"
      @"unknown"))

  )

(defn main []
  (let-do [s &(IO.read-file "data.json")]
    (println* "Will parse:\n" s)
    (let-do [parsed (Json.parse s)]
      (println* "a = " (Json.double parsed "a"))
      (println* "b = " &(Json.string parsed "b"))
      (println* "c[2] = " (Json.double parsed "c[2]"))
      (println* "")
      (println* "type of a = " &(Json.type-to-str (Json.type parsed "a")))
      (println* "type of b = " &(Json.type-to-str (Json.type parsed "b")))
      (println* "type of c = " &(Json.type-to-str (Json.type parsed "c")))
      )
    0))
